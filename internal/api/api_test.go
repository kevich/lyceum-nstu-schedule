package api

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"kevich/lyceum-nstu-schedule/tools"
	"net/http"
	"net/http/httptest"
	"testing"
)

const scheduleHtml = `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1"/>
<title>Школьное расписание</title>
<meta name="keywords" content="Школьное расписание НИКА-Люкс НИКА-Софт">
<script type="text/javascript" src="nika_data_09022025_132746.js"></script>
<script type="text/javascript" src="schedule.js"></script>
</head>
<body></body>
</html>`

func TestApiGetData(t *testing.T) {
	json := `{
    "VERTICAL_CLASSES": false,
    "SHOW_TEACHERS": true,
    "SECOND_RELATIVE": true,
    "STRIKEOUT_FREE_LSN": true,
    "SHOW_EXCHANGES_TERM": true,
    "DISABLE_LINK_LOGO": true,
}`
	rawJS := []byte(`// nika_data.js;  description: schedule in JSON format
// this file automatically generated by Nika-Soft(c) products

var NIKA=
%s;`)
	serverMux := http.NewServeMux()
	serverMux.HandleFunc("/rasp/schedule.html", func(rw http.ResponseWriter, r *http.Request) {
		_, err := fmt.Fprintln(rw, scheduleHtml)
		tools.CheckError(err, "failed returning response")
	})
	serverMux.HandleFunc("/rasp/nika_data_09022025_132746.js", func(rw http.ResponseWriter, r *http.Request) {
		_, err := fmt.Fprintln(rw, fmt.Sprintf(string(rawJS), json))
		tools.CheckError(err, "failed returning response")
	})
	server := httptest.NewServer(serverMux)
	defer server.Close()

	api := ScheduleAPI{server.Client(), server.URL}
	response, err := api.ApiGetData()
	assert.NoError(t, err, "failed returning response")
	assert.Equal(t, json, string(response), "failed returning response")
}

func TestApiGetDataChecksScheduleBody(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {
		_, err := fmt.Fprintln(rw, nil)
		tools.CheckError(err, "failed returning response")
	}))
	defer server.Close()

	api := ScheduleAPI{server.Client(), server.URL}
	response, err := api.ApiGetData()
	assert.Error(t, err, "failed returning response")
	assert.Nil(t, response)
}
